name: Terraform CI/CD Pipeline

on:
  workflow_call:
    inputs:
        environment:
            type: string
            description: environment to deploy to
            required: true

env:
    TF_INPUT: true
    TF_IN_AUTOMATION: true
    TF_LOG: INFO
    TF_VAR_aws_instance_type: ${{ inputs.aws_instance_type }}
    TF_VAR_billing_code: ${{ inputs.billing_code }}
    TF_VAR_vpc_cidr_block: ${{ vars.VPC_CIDR_BLOCK }}
    TF_VAR_vpc_subnet_count: ${{ vars.VPC_SUBNET_COUNT }}
    TF_VAR_vpc_subnet_mask: ${{ vars.VPC_SUBNET_MASK }}
    TF_VAR_project: ${{ vars.PROJECT }}
    TF_VAR_company: ${{ vars.COMPANY }}
    TF_VAR_region: ${{ inputs.aws_region }}
    TF_VAR_node_desired_capacity: ${{ vars.NODE_DESIRED_CAPACITY }}
    TF_VAR_node_maximum_capacity: ${{ vars.NODE_MAXIMUM_CAPACITY }}
    TF_VAR_node_minumum_capacity: ${{ vars.NODE_MINUMUM_CAPACITY }}
    TF_VAR_eks_version: ${{ inputs.eks_version }}

jobs:
  plan_and_apply:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Show Inputs
        run: |
          echo "Region: $TF_VAR_region"
          echo "Billing Code: ${{ inputs.backend_region }}"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
            role-session-name: ${{ vars.SESSION_NAME }}
            aws-region: ${{ vars.AWS_REGION }}
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Terraform Setup and Apply
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: ./deployment/terraform/terraform-provision-ekscluster-use-case-1
        run: | 
            terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.BACKEND_BUCKET }}" \
            -backend-config="key=${{ vars.BACKEND_KEY }}" \
            -backend-config="region=${{ inputs.backend_region }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ secrets.DYNAMODB_TABLE }}"

      - name: Terraform Format
        id: format
        run: terraform fmt -check

      - name: Terraform Workspace
        id: workspace
        run: |
            set -e
            WORKSPACE="${{ inputs.workspace_name }}"
            if terraform workspace list | grep -q "\b$WORKSPACE\b"; then
                terraform workspace select "$WORKSPACE"
            else
                terraform workspace new "$WORKSPACE"
            fi 
      
      - name: Terraform Validate
        id: validate
        if: (success() || failure())
        run: terraform validate
      - name: Terraform Plan
        run: terraform plan
        working-directory: ./deployment/terraform/terraform-provision-ekscluster-use-case-1

      - name: Terraform Apply
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: terraform apply -auto-approve
        working-directory: ./deployment/terraform/terraform-provision-ekscluster-use-case-1    
